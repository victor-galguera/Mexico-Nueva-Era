<?php

//make sure we have more memory than 196M. if not lets try to increase it.
if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '32M') {
  ini_set('memory_limit', '196M');
}
ini_set('max_execution_time', '240');
$max_nesting_level = ini_get('xdebug.max_nesting_level');
if ($max_nesting_level > 0 && $max_nesting_level <= '200') {
  ini_set('xdebug.max_nesting_level', 200);
}

function cms_install(&$tasks, &$install_state) {

  $f = fopen(dirname(__FILE__) . '/default_theme', 'r');
  $cms_theme = str_replace(array("\r", "\n"), '', fgets($f));
  fclose($f);
  variable_set('cms_theme', $cms_theme);

  $f = fopen(dirname(__FILE__) . '/demopack', 'r');
  $demopack = str_replace(array("\r", "\n"), '', fgets($f));
  fclose($f);
  variable_set('cms_demopack', $demopack);

  $f = fopen(dirname(__FILE__) . '/themesettings', 'r');
  $themesettings = str_replace(array("\r", "\n"), '', fgets($f));
  fclose($f);

  $bootstrap_themes = array('cms_bootstrap3', 'nexus', 'glazed');
  if (!in_array($cms_theme, $bootstrap_themes)) {
    variable_set('cms_core_bootstrap_load', 1);
    variable_set('cms_core_bootstrap_compatibility_mode', 1);
  }

  // Demo content needs to be loaded before we can set blocks, menus and frontpage content etc.
  module_enable(array('linkit'));
  module_enable(array('azexo_composer'));
  module_enable(array('glazed_config'));
  module_enable(array('cms_blog_content'));
  module_enable(array('cms_events_content'));
  module_enable(array('cms_news_content'));
  module_enable(array('cms_portfolio_content'));
  module_enable(array('cms_contact_content'));
  module_enable(array($demopack));
  module_enable(array($themesettings));
  _color_module_css_write($cms_theme);
  _glazed_css_cache_build($cms_theme);

  // put blocks in theme regions
  $values = array();
  $st_themes = array('beau', 'cuttingedge', 'deviant', 'galaxy', 'gently', 'hellofolio', 'lumi', 'newmedia', 'prophoto', 'respondr', 'syan', 'synopsis', 'touchpro', 'urgency');
  if (in_array($cms_theme, $st_themes)) {
    require_once dirname(__FILE__) . '/theme-block-settings/st-themes-block-settings.inc';
  }
  require_once(drupal_get_path('module', $demopack) . '/includes/' . $cms_theme . '-block-settings.install');
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'visibility', 'weight', 'region', 'pages', 'title', 'cache', 'css_class'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  module_load_include('inc', 'pathauto');
  module_load_include('inc', 'pathauto.pathauto');
  $nids = db_query("SELECT nid FROM {node}")->fetchCol();
  pathauto_node_update_alias_multiple($nids, 'bulkupdate');

  // Install Homepage
  require_once(drupal_get_path('module', $demopack) . '/includes/homepage.install');

  // Remove any status messages that might have been set. They are unneeded.
  drupal_get_messages('status', TRUE);
  drupal_get_messages('warning', TRUE);
}

//
//  Helper functions
//


function _cms_get_node_path_for_uuid($uuid) {
  // module_load_include('inc', 'uuid', 'uuid.entity');
  module_load_include('module', 'uuid');
  $nid = entity_get_id_by_uuid('node', array($uuid));
  $system_path = 'node/' . array_pop($nid);
  return $system_path;
}

function _color_module_css_write($theme) {
  // stuff copied from color module
  module_load_include('module', 'color');
  $info = color_get_info($theme);
  $palette = color_get_palette($theme);

  // Delete old files.
  foreach (variable_get('color_' . $theme . '_files', array()) as $file) {
    @drupal_unlink($file);
  }
  if (isset($file) && $file = dirname($file)) {
    @drupal_rmdir($file);
  }

  // Prepare target locations for generated files.
  $id = $theme . '-' . substr(hash('sha256', serialize($palette) . microtime()), 0, 8);
  $paths['color'] = 'public://color';
  $paths['target'] = $paths['color'] . '/' . $id;
  foreach ($paths as $path) {
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  }
  $paths['target'] = $paths['target'] . '/';
  $paths['id'] = $id;
  $paths['source'] = drupal_get_path('theme', $theme) . '/';
  $paths['files'] = $paths['map'] = array();

  // Save palette and logo location.
  variable_set('color_' . $theme . '_palette', $palette);
  variable_set('color_' . $theme . '_logo', $paths['target'] . 'logo.png');

  // Rewrite theme stylesheets.
  $css = array();
  foreach ($info['css'] as $stylesheet) {
    // Build a temporary array with LTR and RTL files.
    $files = array();
    if (file_exists($paths['source'] . $stylesheet)) {
      $files[] = $stylesheet;

      $rtl_file = str_replace('.css', '-rtl.css', $stylesheet);
      if (file_exists($paths['source'] . $rtl_file)) {
        $files[] = $rtl_file;
      }
    }

    foreach ($files as $file) {
      // Aggregate @imports recursively for each configured top level CSS file
      // without optimization. Aggregation and optimization will be
      // handled by drupal_build_css_cache() only.
      $style = drupal_load_stylesheet($paths['source'] . $file, FALSE);

      // Return the path to where this CSS file originated from, stripping
      // off the name of the file at the end of the path.
      $base = base_path() . dirname($paths['source'] . $file) . '/';
      _drupal_build_css_path(NULL, $base);

      // Prefix all paths within this CSS file, ignoring absolute paths.
      $style = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $style);

      // Rewrite stylesheet with new colors.
      $style = _color_rewrite_stylesheet($theme, $info, $paths, $palette, $style);
      $base_file = drupal_basename($file);
      $css[] = $paths['target'] . $base_file;
      _color_save_stylesheet($paths['target'] . $base_file, $style, $paths);
    }
  }

  // Maintain list of files.
  variable_set('color_' . $theme . '_stylesheets', $css);
  variable_set('color_' . $theme . '_files', $paths['files']);
}

/**
 * Theme CSS generator from Glazed theme-settings.php
 * Custom theme settings might need a lot of CSS
 * So we put it in a file for optimal performance
 */
function _glazed_css_cache_build($theme) {
  global $base_path, $base_theme_info;
  $files_path = variable_get('file_public_path', conf_path() . '/files');

  $glazed_css_file = $files_path . '/glazed-themesettings-' . $theme . '.css';
  //Construct CSS file:
  $CSS = '';
  // Load Sooper Features CSS
  foreach (file_scan_directory(drupal_get_path('theme', $theme) . '/features', '/css.inc/i') as $file) {
    require_once($file->uri);
  }

  $fh = fopen($glazed_css_file, 'w');
  if ($fh) {
    fwrite($fh, $CSS); // write css to file
    watchdog('Glazed', 'Glazed CSS file cache built for %theme', array('%theme' => $theme));
  }
  else {
    drupal_set_message(t('Cannot write theme-settings file, please check your file system. (See status report page)'), 'error');
  }

  fclose($fh);
  // If the CSS & JS aggregation are enabled we need to clear the caches
  drupal_clear_css_cache();
  drupal_clear_js_cache();
}
